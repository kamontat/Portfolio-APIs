FORMAT: 1A
HOST: https://api.kcnt.info

# KcNt APIs

This APIs is for getting personal information of the website in form of `JSON`.

## What is KcNt

KcNt is a website for display personal information in form of portfolio to introduce someone who don't know who we are. you can go to website by this [link](https://kcnt.info)

:::note
## Basic information

This APIs URI Parameters can be use in two ways.

1. add a parameters in url path, on the parameters that have a set of possible choices, you can add it into the path on any order.
2. you can also add a parameters to the url query as well.

**Example:** if the path accept `branch` query with possible value is only `master` or `dev`. 
you can make a path like `/apis/master` or `/apis/dev`, or in the query like `api?branch=master` or `api?branch=dev`.
:::

# Group Informations

We seperate the information into 2 subfiles. one is `information` and another is `social`.

The information will contain almost every personal information except the social account, for example **facebook**, **twitter** and so on.

## Personal information [/personal/{branch}/{user}/{lang}/{type}{?branch,user,lang,type}]

This APIs will able to receive every information base on your query

### Get personal information [GET]

+ Parameters
    + branch (optional, enum[string]) - branch to query the information
        + Default: `master`
        + Members
            + `master`
            + `dev
    + user (optional, enum[string]) - name of the person who want to get
        + Default: `net`
        + Members
            + `net`
            + `prang`
    + lang (optional, enum[string]) - language to query
        + Default: `en`
        + Members
            + `en`
            + `th`
    + type (optional, enum[string]) - type of the query
        + Default: `information`
        + Members
            + `information`
            + `social`

+ Response 200 (application/json)

        {
          "abbreviation":"kc",
          "picture":"/resources/images/base0137-small.jpg",
          "name":{
            "firstName":"Kamontat",
            "lastName":"Chantrachirathumrong"
          },
          "nickname":"net",
          "email":"kamontat_c@hotmail.com",
          "birthday":"08-Nov-1996",
          "location":{
            "address":"8/32 Soi Phahon Yothin 34 Yaek 2",
            "city":"Chatuchak",
            "postalCode":"10900",
            "country":"Thailand"
          },
          "phone":"0851811177"
        }

# Group Collections

This for query a collection of perform, we have 8 type which is `educations`, `interests`, `languages`, `projects`, `references`, `skills`, `volunteers`, and `works`.

## Root of collection APIs [/collection/{branch}/{user}/{lang}/{type}{?branch,user,lang,type}]

### Get collections [GET]

:::warning
#### <i class="fa fa-warning"></i> Caution

In case you have to query collection that more than 1 set, you have to think about the query time as well, because for now the code didn't optimize anything yet.
:::

:::warning
#### <i class="fa fa-warning"></i> Caution 2

This APIs is a wrapper of Github APIs so if you query too much Github will block your ip address, to resolve that problem please see at <https://developer.github.com/v3/#authentication>
:::

+ Parameters
    + branch (optional, enum[string]) - branch to query the information
        + Default: `master`
        + Members
            + `master`
            + `dev
    + user (optional, enum[string]) - name of the person who want to get
        + Default: `net`
        + Members
            + `net`
            + `prang`
    + lang (optional, enum[string]) - language to query (WIP)
        + Default: `en`
        + Members
            + `en`
            + `th`
    + type (optional, enum[string]) - type of the query

        This `type` can appear multiple times

        + Default: `projects`
        + Members
            + `educations`
            + `interests`
            + `languages`
            + `projects`
            + `references`
            + `skills`
            + `volunteers`
            + `works`

+ Request with authorization

        + Headers
            Authorization: token OAUTH-TOKEN

+ Response 200 (application/json)

        {
          "languages":[
            {
              "language":"English",
              "fluency":3
            },
            {
              "language":"Chinese",
              "fluency":2
            },
            {
              "language":"Thai",
              "fluency":1
            }
          ]
        }

+ Response 200 (application/json)

        {
          "educations": [
          ],
          "languages": [
            {  
              "language":"English",
              "fluency":3
            },
            {  
              "language":"Chinese",
              "fluency":2
            },
            {  
              "language":"Thai",
              "fluency":1
            }
          ]
        }

# Group Images

## Logo collection [/logo/{branch}/{color}/{size}/{type}/{extension}{?branch,color,size,type,extension}]

### get logo [GET]

+ Parameters
    + branch (optional, enum[string]) - branch to query the information
        + Default: `master`
        + Members
            + `master`
            + `dev`
    + color (optional, enum[string]) - color of the logo
        + Default: `primary`
        + Members
            + `primary`
            + `light`
            + `dark`
    + size (optional, enum[string]) - size of the logo

        Normal is mean `512Ã—512`
        Smaller is `256x256`
        High is mean high resolution at `300ppi` in `512x512`

        + Default: `normal`
        + Members
            + `normal`
            + `small`
            + `high`
    + type (optional, enum[string]) - type of the logo
        + Default: `normal`
        + Members
            + `normal`
            + `round`
    + extension (optional, enum[string]) - extension

        If you enter svg, `size` will be ignore since svg don't have size

        + Default: `png`
        + Members
            + `png`
            + `svg`

+ Response 200 (image/svg)

+ Response 200 (image/png)

# Group Repository

## Current version [/version{?format}]

### Get current version [GET]

+ Parameters
    + format (optional, enum[string]) - format of the response
        + Default: `json`
        + Members
            + `json`
            + `text`

+ Response 200 (application/json)

        {
          version: "2.0.0"
        }

+ Response 200 (text/plain)

        2.0.0

## Package JSON [/package/{type}/{format}/{repo}/{branch}{?type,format,repo,branch}]

### Get package.json information [GET]

+ Parameters
    + type (optional, enum[string]) - value type
        + Default: `all`
        + Members
            + `all`
            + `name`
            + `description`
            + `author`
            + `version`
            + `license`
            + `dependencies`
            + `devDependencies`
            + `repository`
            + `scripts`
    + format (optional, enum[string]) - format of the response
        + Default: `json`
        + Members
            + `json`
            + `text`
            + `text-head`
    + repo (optional, enum[string]) - repository of the package.json
        + Default: `apis`
        + Members
            + `apis`
            + `docs`
            + `web`
    + branch (optional, enum[string]) - branch to query the information
        + Default: `master`
        + Members
            + `master`
            + `dev`

+ Response 200 (application/json)

        {  
          "name":"kcnt-info-apis",
          "version":"2.0.0",
          "description":"My Portfolio website",
          "repository":"https://github.com/kcnt-info/apis.git",
          "author":"Kamontat Chantrachirathumrong <kamontat_c@hotmail.com>",
          "license":"MIT",
          "dependencies":{  
              "@octokit/rest":"16.2.0",
              "aglio":"2.3.0",
              "axios":"0.18.0",
              "bluebird":"3.5.3"
          },
          "devDependencies":{  
              "apidoc":"0.17.7",
              "netlify-lambda":"1.1.1"
          },
          "scripts":{  
              "dump-version":"git tag \"$(node ./scripts/dump-version.js)\"",
              "start":"netlify-lambda serve src/apis",
              "build":"netlify-lambda build src/apis",
              "docs:compile":"mkdir docs 2>/dev/null; aglio --theme-variables slate -i src/docs/index.apib -o docs/docs.html && cp _redirects docs/_redirects && cp 404.html docs/404.html",
              "docs:start":"aglio --theme-variables slate -i src/docs/index.apib -o docs/docs.html -s",
              "prepush":"yarn dump-version",
              "push":"git push && git push --tag",
              "deploy":"yarn docs:compile && yarn build"
          }
        }

+ Response 200 (text/plain)

        2.0.0